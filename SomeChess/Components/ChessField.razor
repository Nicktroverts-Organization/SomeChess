@inject IJSRuntime JsRuntime;
@using Microsoft.AspNetCore.Components.Web
@using SomeChess.Code.GameEngine.ChessImplementation
@using SomeChess.Code.MatchMaking.ChessMatchImplementation
@using SomeChess.Code.Social
@using SomeChess.Code.MatchMaking
@using SomeChess.Code
@inject NavigationManager NavigationManager
@inject UserAuthentication social

@if (!Reload)
{
    <div class="flex text-center justify-center place-content-evenly mt-7">
        <div class="chessboard select-none flex text-center justify-center">
            @for (int i = 0; i < 8; i++)
            {
                int LoopI = i;
                <div>
                    @for (int u = 7; u >= 0; u--)
                    {
                        int LoopU = u;
                        string color = "";
                        if (LoopI % 2 == 0) // LoopI ist gerade
                        {
                            if (LoopU % 2 != 0) // LoopU ist ungerade
                                color = "blackCell";
                            else //LoopU ist gerade
                                color = "whiteCell";
                        }
                        else //LoopI ist ungerade
                        {
                            if (LoopU % 2 != 0) //LoopU ist ungerade
                                color = "whiteCell";
                            else // LoopU ist gerade
                                color = "blackCell";
                        }

                        string pieceColor;
                        @if (ChessGame.Board.GetPiece(Chess.AlphConversionChars[LoopI] + (LoopU + 1).ToString()).Team == Team.White)
                            pieceColor = "w";
                        else pieceColor = "b";

                        <div class="item @color " onmouseup="getMouseUpElementID(event)" onmousedown="getMouseDownID(this)" onmouseover="SelectedPeace(this)" id="@(Chess.AlphConversionChars[LoopI] + (LoopU + 1).ToString())">
                            @((MarkupString)PieceToHTML[ChessGame.Board.GetPiece(Chess.AlphConversionChars[LoopI] + (LoopU + 1).ToString()).PieceType].Replace("src=\"images/w", $"src=\"images/{pieceColor}"))
                        </div>
                    }
                </div>
            }
        </div>
        <div class="backholder ml-24 flex flex-col text-center ">
            <h1 class="greengradient anton-regular">
                Play Chess<br />
                Online<br />
                on the #1 Site!
            </h1>
            <div>
                <button @onclick="() => { PlayOnline = true;}" class="playOnline"><img width="72" height="2" src="images/online-icon.png" />Play Online<br /><span>Play with a real person online!</span></button>
            </div>
            <div>
                <button class="playComputer"><img width="72" height="2" src="images/computer-icon.png" /> Computer<br /><span class="smalltextPlayComputer">Play vs training bots</span></button>
            </div>
        </div>
    </div>
}


@code {
    bool NotNewGame = false;
    public bool isDragging = true;
    public bool PlayOnline = false;
    public bool Reload = true;
    int SelectedButton = 0;
    public Chess ChessGame;
    public ChessMatchConstructor constructor = new();

    public Dictionary<ChessPieceType, string> PieceToHTML = new Dictionary<ChessPieceType, string>()
    {
        { ChessPieceType.Pawn, "<div class=\"@((isDragging) ? \"selected\" : \"\")\" >\r\n <img draggable=\"true\" ondragstart=\"return false;\"  class=\"powns chessPiece\" src=\"images/w_pawn.png\" />\r\n</div>" },
        { ChessPieceType.Knight, "<div class=\"@((isDragging) ? \"selected\" : \"\")\" >\r\n <img draggable=\"true\" ondragstart=\"return false;\"  class=\"knight chessPiece\" src=\"images/w_knight.png\" />\r\n</div>"},
        { ChessPieceType.Bishop, "<div class=\"@((isDragging) ? \"selected\" : \"\")\" >\r\n <img draggable=\"true\" ondragstart=\"return false;\"  class=\"normalefiguren chessPiece chessPiece\" src=\"images/w_bishop.png\" />\r\n</div>"},
        { ChessPieceType.Rook, "<div class=\"@((isDragging) ? \"selected\" : \"\")\">\r\n <img draggable=\"true\" ondragstart=\"return false;\"  class=\"rook chessPiece\" src=\"images/w_rook.png\" />\r\n</div>" },
        { ChessPieceType.Queen, "<div class=\"@((isDragging) ? \"selected\" : \"\")\" >\r\n <img draggable=\"true\" ondragstart=\"return false;\"  class=\"normalefiguren chessPiece\" src=\"images/w_queen.png\" />\r\n </div>"},
        { ChessPieceType.King, "<div class=\"@((isDragging) ? \"selected\" : \"\")\" >\r\n <img draggable=\"true\" ondragstart=\"return false;\"  class=\"normalefiguren chessPiece chessPiece\" src=\"images/w_king.png\" />\r\n\r\n</div>" },
        { ChessPieceType.None, ""},
    };

    public static string FromID = "";
    public static string ToID = "";
    public bool isFirstClick = true;

    private DotNetObjectReference<ChessField> dotNetReference;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await social.FetchPlayerAsync();

            if(social.CurrentPlayer == null)
            {
                NavigationManager.NavigateTo("/", forceLoad: true);
            }

            ChessStorage chesses = ChessStorage.GetInstance();

            if(social.CurrentPlayer.PlayersMatch != Guid.Empty)
            {
                Chess? chess = chesses.FindChessGameById(social.CurrentPlayer.PlayersMatch);

                if(chess != null)
                {
                    ChessGame = chess;
                }
                else
                {
                    NavigationManager.NavigateTo("/", forceLoad: true);
                }
            }
            else
            {
                NavigationManager.NavigateTo("/", forceLoad: true);
            }
            

            ChessGame.StartGame();
            ChessGame.UpdateGameState();
            ChessGame.ResetBoard();
            ChessGame.StartGame();
            // See warning about memory above in the article
            dotNetReference = DotNetObjectReference.Create(this);
            await JsRuntime.InvokeVoidAsync("setDotNetReference", dotNetReference);
        }
        if (Reload)
        {
            Reload = false;
            StateHasChanged();
        }
    }

    public ChessMatch CreateChessMatch(GameMode mode)
    {
        ChessMatch newMatch = constructor.CreateMatch(new Player("Someone", Tools.Create16DigitID()), mode);
        MatchSearching.GetInstance().AddMatch(newMatch);
        NavigationManager.NavigateTo("/chess/" + newMatch.GetMatchID(), true);
        return newMatch;
    }

    void SetButtonState(int buttonNumber)
    {
        if (SelectedButton != buttonNumber)
        {
            SelectedButton = buttonNumber;
        }
        else
        {
            SelectedButton = 0;
        }
    }

    public void ReloadGame()
    {
        Reload = true;
        StateHasChanged();
    }

    [JSInvokable("IdHandler")]
    public async Task IdHandler(string id, string Event)
    {
        if (Event == "mousedown")
            FromID = id;
        else if (Event == "mouseup")
        {
            ToID = id;
            Console.WriteLine(ChessGame.GetGameState());
            if (ChessGame.MovePiece(FromID, ToID))
            {
                ChessGame.EndTurn();
                Reload = true;
                StateHasChanged();
            }
            else
            {
                ToID = FromID;
                Reload = true;
                StateHasChanged();
                //await JsRuntime.InvokeVoidAsync("MovePiece", FromID, ToID);
            }
        }
    }
}