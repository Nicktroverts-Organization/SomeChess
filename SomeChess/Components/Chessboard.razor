@inject IJSRuntime JsRuntime;
@inject NavigationManager NavMan;
@using Microsoft.AspNetCore.Components.Web
@using SomeChess.Code
@using SomeChess.Code.GameEngine.ChessImplementation
@using SomeChess.Code.MatchMaking.ChessMatchImplementation
@using SomeChess.Code.Social

<div>
    @if (!Reload)
    {
        <div class="flex text-center justify-center place-content-evenly mt-7">
            <div class="chessboard select-none flex text-center justify-center">
                @for (int i = 0; i < 8; i++)
                {
                    int LoopI = i;
                    <div>
                        @for (int u = 7; u >= 0; u--)
                        {
                            int LoopU = u;
                            string color = "";
                            if (LoopI % 2 == 0) // LoopI ist gerade
                            {
                                if (LoopU % 2 != 0) // LoopU ist ungerade
                                    color = "whiteCell";
                                else //LoopU ist gerade
                                    color = "blackCell";
                            }
                            else //LoopI ist ungerade
                            {
                                if (LoopU % 2 != 0) //LoopU ist ungerade
                                    color = "blackCell";
                                else // LoopU ist gerade
                                    color = "whiteCell";
                            }

                            string pieceColor;
                            @if (ChessGame.Board.GetPiece(Chess.AlphConversionChars[LoopI] + (LoopU + 1).ToString()).Team == Team.White)
                                pieceColor = "w";
                            else pieceColor = "b";

                            <div class="item @color" onmouseup="getMouseUpElementID(event)" onmousedown="getMouseDownID(this)" id="@(Chess.AlphConversionChars[LoopI] + (LoopU + 1).ToString())">
                                @((MarkupString)PieceToHTML[ChessGame.Board.GetPiece(Chess.AlphConversionChars[LoopI] + (LoopU + 1).ToString()).PieceType].Replace("src=\"images/w", $"src=\"images/{pieceColor}"))
                            </div>
                        }
                    </div>
                }
            </div>
            @if (!NavMan.Uri.ToLower().Contains("/chess/"))
            {
                <div class="backholder ml-24 flex flex-col text-center ">
                    <h1 class="greengradient anton-regular">
                        Play Chess<br />
                        Online<br />
                        on the #1 Site!
                    </h1>
                    <div>
                        <button @onclick="() => { PlayOnline = true;}" class="playOnline"><img width="72" height="2" src="images/online-icon.png" />Play Online<br /><span>Play with a real person online!</span></button>
                    </div>
                    <div>
                        <button class="playComputer"><img width="72" height="2" src="images/computer-icon.png" /> Computer<br /><span class="smalltextPlayComputer">Play vs training bots</span></button>
                    </div>
                </div>
            }
            else
            {
                <div class="backholder ml-24 flex flex-col text-center ">
                    <div class="move-history">
                        @foreach (var move in MoveHistory)
                        {
                            <p>@move.Item1 - @move.Item2</p>
                        }
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="flex text-center justify-center place-content-evenly mt-7">
            <div class="chessboard select-none flex text-center justify-center">
                @for (int i = 0; i < 8; i++)
                {
                    int LoopI = i;
                    <div>
                        @for (int u = 7; u >= 0; u--)
                        {
                            int LoopU = u;
                            string color = "";
                            if (LoopI % 2 == 0) // LoopI ist gerade
                            {
                                if (LoopU % 2 != 0) // LoopU ist ungerade
                                    color = "whiteCell";
                                else //LoopU ist gerade
                                    color = "blackCell";
                            }
                            else //LoopI ist ungerade
                            {
                                if (LoopU % 2 != 0) //LoopU ist ungerade
                                    color = "blackCell";
                                else // LoopU ist gerade
                                    color = "whiteCell";
                            }

                            string pieceColor;
                            @if (ChessGame.Board.GetPiece(Chess.AlphConversionChars[LoopI] + (LoopU + 1).ToString()).Team == Team.White)
                                pieceColor = "w";
                            else pieceColor = "b";

                            <div class="item @color" onmouseup="getMouseUpElementID(event)" onmousedown="getMouseDownID(this)" id="@(Chess.AlphConversionChars[LoopI] + (LoopU + 1).ToString())">
                                @((MarkupString)PieceToHTML[ChessGame.Board.GetPiece(Chess.AlphConversionChars[LoopI] + (LoopU + 1).ToString()).PieceType].Replace("src=\"images/w", $"src=\"images/{pieceColor}"))
                            </div>
                        }
                    </div>
                }
            </div>
            @if (!NavMan.Uri.ToLower().Contains("/chess/"))
            {
                <div class="backholder ml-24 flex flex-col text-center ">
                    <h1 class="greengradient anton-regular">
                        Play Chess<br/>
                        Online<br/>
                        on the #1 Site!
                    </h1>
                    <div>
                        <button @onclick="() => { PlayOnline = true;}" class="playOnline"><img width="72" height="2" src="images/online-icon.png" />Play Online<br /><span>Play with a real person online!</span></button>
                    </div>
                    <div>
                        <button class="playComputer"><img width="72" height="2" src="images/computer-icon.png" /> Computer<br /><span class="smalltextPlayComputer">Play vs training bots</span></button>
                    </div>
                </div>
            }
            else
            {
                <div class="backholder ml-24 flex flex-col text-center ">
                    <div class="move-history">
                        @foreach (var move in MoveHistory)
                        {
                            <p>@move.Item1 - @move.Item2</p>
                        }
                    </div>
                </div>
            }
        </div>
    }
</div>
@if (PlayOnline)
{
    <div class="chooseTime flex flex-col">
        <div>
            <span @onclick="() => { PlayOnline = false; }" class="material-symbols-outlined fixed absolute select-none">cancel</span>
            <h1 class="greengradient ml-16">Choose a Time</h1>
        </div>
        <div class="ml-8">
            <div>
                <h2 class="anton-regular mt-5">Bullet</h2>
                <div class="flex justify-evenly">
                    <button @onclick="() => {SetButtonState(1); CreateChessMatch(GameMode.OnlineOneMinute);}" class="@((SelectedButton == 1) ? "selectedTimeShadow" : "")">1 Minutes</button>
                    <button @onclick="() => {SetButtonState(2); CreateChessMatch(GameMode.OnlineOneMinutePlusOne);}" class="@((SelectedButton == 2) ? "selectedTimeShadow" : "")">1 | 1</button>
                    <button @onclick="() => {SetButtonState(3); CreateChessMatch(GameMode.OnlineTwoMinutesPlusOne);}" class="@((SelectedButton == 3) ? "selectedTimeShadow" : "")">2 | 1</button>
                </div>

            </div>
            <div>
                <h2 class="anton-regular  mt-7">Blitz</h2>
                <div class="flex justify-evenly">
                    <button @onclick="() => {SetButtonState(4); CreateChessMatch(GameMode.OnlineThreeMinutes);}" class="@((SelectedButton == 4) ? "selectedTimeShadow" : "")">3 Minutes</button>
                    <button @onclick="() => {SetButtonState(5); CreateChessMatch(GameMode.OnlineThreeMinutesPlusTwo);}" class="@((SelectedButton == 5) ? "selectedTimeShadow" : "")">3 | 2</button>
                    <button @onclick="() => {SetButtonState(6); CreateChessMatch(GameMode.OnlineFiveMinutes);}" class="@((SelectedButton == 6) ? "selectedTimeShadow" : "")">5 Minutes</button>
                </div>

            </div>
            <div>
                <h2 class="anton-regular mt-7">Rapid</h2>
                <div class="flex justify-evenly">
                    <button @onclick="() => {SetButtonState(7); CreateChessMatch(GameMode.OnlineTenMinutes);}" class="@((SelectedButton == 7) ? "selectedTimeShadow" : "")">10 Minutes</button>
                    <button @onclick="() => {SetButtonState(8); CreateChessMatch(GameMode.OnlineFifteenMinutesPlusTen);}" class="@((SelectedButton == 8) ? "selectedTimeShadow" : "")">15 | 10</button>
                    <button @onclick="() => {SetButtonState(9); CreateChessMatch(GameMode.OnlineThirtyMinutes); }" class="@((SelectedButton == 9) ? "selectedTimeShadow" : "")">30 Minutes</button>
                </div>
            </div>
            <div class="playButton flex justify-center mt-14 select-none">
                <a class="flex text-center justify-center">Play</a>
            </div>
        </div>
    </div>
}
@if (!ChessGame.IsPlaying && GameOver)
{
    <div class="w-screen absolute h-screen gameOverScreen">
        @if (ChessGame.GameState == ChessState.WhiteWin)
        {
            <span @onclick="() => { GameOver = false; }" class="material-symbols-outlined fixed absolute select-none ">cancel</span>
            <div class="w-96 h-2/6 flex flex-col justify-evenly items-center rounded-lg gameOverDesign">
                <div>
                    <p class="anton-regular text-4xl">You won the game!</p>
                </div>
                <div>
                    <a href="@("/")" class="playAgainLink">Play new one!</a>
                </div>
            </div>
        }
        else if (ChessGame.GameState == ChessState.BlackWin)
        {
            <span @onclick="() => { GameOver = false; }" class="material-symbols-outlined fixed absolute select-none">cancel</span>
            <div class="w-96 h-2/6 flex flex-col justify-evenly items-center rounded-lg gameOverDesign">
                <div>
                    <p class="anton-regular text-4xl">You lost the game!</p>
                </div>
                <div>
                    <a href="@("/")" class="playAgainLink">Play new one!</a>
                </div>
            </div>
        }
    </div>
}
 
@code {
    bool GameOver = true;
    string GameWon = "white";
    bool NotNewGame = true;
    public bool isDragging = true;
    public bool PlayOnline = false;
    public bool Reload = true;
    int SelectedButton = 0;
    public Chess ChessGame = new Chess();
    public ChessMatchConstructor constructor = new();
    public ILogger logger = LoggingHandler.GetLogger<Chessboard>();

    List<Tuple<ChessPieceType, string>> MoveHistory { get; set; } = new();

    public Dictionary<ChessPieceType, string> PieceToHTML = new Dictionary<ChessPieceType, string>()
    {
        { ChessPieceType.Pawn, "<div class=\"@((isDragging) ? \"selected\" : \"\")\" >\r\n <img draggable=\"@(ChessGame.GameState == ChessState.BlackWin || ChessGame.GameState == ChessState.WhiteWin ? \"false\" : \"true\")\" ondragstart=\"return false;\"  class=\"powns chessPiece\" src=\"images/w_pawn.png\" />\r\n</div>" },
        { ChessPieceType.Knight, "<div class=\"@((isDragging) ? \"selected\" : \"\")\" >\r\n <img draggable=\"@(ChessGame.GameState == ChessState.BlackWin || ChessGame.GameState == ChessState.WhiteWin ? \"false\" : \"true\")\" ondragstart=\"return false;\"  class=\"knight chessPiece\" src=\"images/w_knight.png\" />\r\n</div>"},
        { ChessPieceType.Bishop, "<div class=\"@((isDragging) ? \"selected\" : \"\")\" >\r\n <img draggable=\"@(ChessGame.GameState == ChessState.BlackWin || ChessGame.GameState == ChessState.WhiteWin ? \"false\" : \"true\")\" ondragstart=\"return false;\"  class=\"normalefiguren chessPiece chessPiece\" src=\"images/w_bishop.png\" />\r\n</div>"},
        { ChessPieceType.Rook, "<div class=\"@((isDragging) ? \"selected\" : \"\")\">\r\n <img draggable=\"@(ChessGame.GameState == ChessState.BlackWin || ChessGame.GameState == ChessState.WhiteWin ? \"false\" : \"true\")\" ondragstart=\"return false;\"  class=\"rook chessPiece\" src=\"images/w_rook.png\" />\r\n</div>" },
        { ChessPieceType.Queen, "<div class=\"@((isDragging) ? \"selected\" : \"\")\" >\r\n <img draggable=\"@(ChessGame.GameState == ChessState.BlackWin || ChessGame.GameState == ChessState.WhiteWin ? \"false\" : \"true\")\" ondragstart=\"return false;\"  class=\"normalefiguren chessPiece\" src=\"images/w_queen.png\" />\r\n </div>"},
        { ChessPieceType.King, "<div class=\"@((isDragging) ? \"selected\" : \"\")\" >\r\n <img draggable=\"@(ChessGame.GameState == ChessState.BlackWin || ChessGame.GameState == ChessState.WhiteWin ? \"false\" : \"true\")\" ondragstart=\"return false;\"  class=\"normalefiguren chessPiece chessPiece\" src=\"images/w_king.png\" />\r\n\r\n</div>" },
        { ChessPieceType.None, ""},
    };

    public static string FromID = "";
    public static string ToID = "";
    public bool isFirstClick = true;

    private DotNetObjectReference<Chessboard> dotNetReference;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // ChessGame.MadeMoves
        // ChessGame.StartGame();
        // ChessGame.UpdateGameState();
        // ChessGame.StartGame();
        if (firstRender)
        {
            ChessGame.StartGame();
            ChessGame.UpdateGameState();
            ChessGame.ResetBoard();
            ChessGame.StartGame();
            // See warning about memory above in the article
            dotNetReference = DotNetObjectReference.Create(this);
            await JsRuntime.InvokeVoidAsync("setDotNetReference", dotNetReference);
        }
        if (Reload)
        {
            Reload = false;
            foreach (var a in MoveHistory)
            {
                logger.LogDebug(a.Item1 + " -> " + a.Item2);
            }

            LoggingHandler.DrawSeperatorLine(ConsoleColor.Magenta);
            StateHasChanged();
        }


        if (!ChessGame.IsPlaying)
        {
            await JsRuntime.InvokeVoidAsync("Over", !ChessGame.IsPlaying);
        }
    }

    public ChessMatch CreateChessMatch(GameMode mode)
    {
        ChessMatch newMatch = constructor.CreateMatch(new Player("Someone", PlayerStorage.Create16DigitString()), mode);
        return newMatch;
    }

    void SetButtonState(int buttonNumber)
    {
       if (SelectedButton != buttonNumber)
       {
           SelectedButton = buttonNumber;
       }
       else
       {
           SelectedButton = 0;
       }
    }

    [JSInvokable("IdHandler")]
    public async Task IdHandler(string id, string Event)
    {
        if (Event == "mousedown")
            FromID = id;
        else if (Event == "mouseup")
        {
            ToID = id;
            ChessPiece FromPiece = ChessGame.Board.GetPiece(FromID);
            if (ChessGame.MovePiece(FromID, ToID))
            {
                ChessGame.EndTurn();
                Reload = true;
                MoveHistory.Add(new Tuple<ChessPieceType, string>(FromPiece.PieceType, ToID));
                StateHasChanged();
            }
            else
            {
                ToID = FromID;
                Reload = true;
                StateHasChanged();
                //await JsRuntime.InvokeVoidAsync("MovePiece", FromID, ToID);
            }
        }
    }
}